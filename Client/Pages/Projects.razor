@page "/projects"
@*@page "/projects/{SessionID}"*@
@using Microsoft.AspNetCore.WebUtilities; 
@using Client.Models
@inject HttpClient http
@inject IState appState
@inject NavigationManager navigation

<div class="content-container">
    <ListHeader Title="My Project List"
                HandleAdd="@AddNewProject"
                HandleRefresh="@HandleRefresh"
                RoutePath="/Projects" />
    <div class="columns is-multiline is-variable">
        <div class="column is-8">
            SessionID is: @appState.SessionID
            <ProjectList ErrorMessage="@errorMessage"
                         Projects="@MyProjects"
                         SelectProject="@SelectProject"
                         DeleteProject="@DeleteProject" 
                         />
        </div>
    </div>

    <ModalYesNo Message="@modalMessage"
                OnNo="@CloseModal"
                OnYes="@DeleteFromModal"
                Show="@showModal"/>
   
</div>

@code {
    private string errorMessage = "";
    private IEnumerable<Project> MyProjects;
    private Project ProjectToDelete;
    private bool showModal;
    private string modalMessage = "";

    protected override async Task OnInitializedAsync()
    {
       
        MyProjects = await http.GetFromJsonAsync<IEnumerable<Project>>("api/Projects" + "?SessionID=" + appState.SessionID);
    }

    private void AddNewProject()
    {
        navigation.NavigateTo("/Project/0");
    }

    private async Task HandleRefresh()
    {
        //This gets the project from the Azure Function
        MyProjects = await http.GetFromJsonAsync<IEnumerable<Project>>("api/Projects" + "?SessionID=" + appState.SessionID);
    
        //This call attemps to call the Workfront API 
        //MyProjects = await http.GetFromJsonAsync<IEnumerable<Project>>("api/Projects?SessionID=" + S + SessionID    
    }

    private void SelectProject(Project Project)
    {
        navigation.NavigateTo($"/Project/{Project.ID}");
    }

    private void DeleteProject(Project Project)
    {
        ProjectToDelete = Project;
        showModal = true;
        modalMessage = $"Would you like to delete {ProjectToDelete.name}";
    }

    private void CloseModal()
    {
        ProjectToDelete = null;
        showModal = false;
    }

    private async Task DeleteFromModal()
    {
        await http.DeleteAsync($"api/Projects/{ProjectToDelete.ID}"+ "?SessionID=" + appState.SessionID);
        await HandleRefresh();
        ProjectToDelete = null;
        showModal = false;
    }
}